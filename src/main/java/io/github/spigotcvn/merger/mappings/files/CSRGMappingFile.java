package io.github.spigotcvn.merger.mappings.files;

import io.github.spigotcvn.merger.mappings.InvalidMappingFormatException;
import io.github.spigotcvn.merger.mappings.types.Mapping;
import io.github.spigotcvn.merger.util.Pair;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class CSRGMappingFile implements Loadable, Saveable {
    private final List<Pair<Mapping, Mapping>> orig2remap = new ArrayList<>();

    public void addMapping(Mapping from, Mapping to) {
        orig2remap.add(new Pair<>(from, to));
    }

    public Mapping getRemapped(Mapping from) {
        if(from == null) {
            throw new IllegalArgumentException("Mapping cannot be null");
        }

        for (Pair<Mapping, Mapping> pair : orig2remap) {
            if(pair.getKey().equals(from)) {
                return pair.getValue();
            }
        }
        return null;
    }

    public Mapping getOriginal(Mapping to) {
        for (Pair<Mapping, Mapping> pair : orig2remap) {
            if(pair.getValue().equals(to)) {
                return pair.getKey();
            }
        }
        return null;
    }

    public List<Mapping> getOriginalMappings() {
        List<Mapping> mappings = new ArrayList<>();
        for (Pair<Mapping, Mapping> pair : orig2remap) {
            mappings.add(pair.getKey());
        }
        return mappings;
    }

    public List<Mapping> getRemappedMappings() {
        List<Mapping> mappings = new ArrayList<>();
        for (Pair<Mapping, Mapping> pair : orig2remap) {
            mappings.add(pair.getValue());
        }
        return mappings;
    }

    public void loadFromStream(InputStream is) throws InvalidMappingFormatException {
        try(BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#")) {
                    continue;
                }
                String[] parts = line.split(" ");
                if (parts.length < 2) {
                    throw new InvalidMappingFormatException("Invalid line: " + line);
                }
                if(parts.length == 2) {
                    // this is a class mapping
                    Mapping from = new Mapping(Mapping.Type.CLASS, parts[0], null, null);
                    Mapping to = new Mapping(Mapping.Type.CLASS, parts[1], null, null);
                    this.addMapping(from, to);
                } else if(parts.length == 3) {
                    // this is a field mapping
                    Mapping from = new Mapping(Mapping.Type.FIELD, parts[0], parts[1], null);
                    Mapping to = new Mapping(Mapping.Type.FIELD, parts[2], parts[1], null);
                    this.addMapping(from, to);
                } else if(parts.length == 4) {
                    // this is a method mapping
                    Mapping from = new Mapping(Mapping.Type.METHOD, parts[0], parts[1], parts[2]);
                    Mapping to = new Mapping(Mapping.Type.METHOD, parts[3], parts[1], parts[2]);
                    this.addMapping(from, to);
                } else {
                    throw new InvalidMappingFormatException("Invalid line: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void saveToStream(OutputStream os) {
        try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os))) {
            writer.append("# Generated by MappingMerger").append(System.lineSeparator());
            for (Pair<Mapping, Mapping> pair : orig2remap) {
                Mapping from = pair.getKey();
                Mapping to = pair.getValue();

                if(from == null || to == null) {
                    throw new IllegalStateException("Missing mapping");
                }

                if(from.getType() == Mapping.Type.CLASS) {
                    writer.append(from.getName()).append(" ")
                            .append(to.getName()).append(System.lineSeparator());
                } else if(from.getType() == Mapping.Type.FIELD) {
                    writer.append(from.getName()).append(" ")
                            .append(from.getClassName()).append(" ")
                            .append(to.getName()).append(System.lineSeparator());
                } else if(from.getType() == Mapping.Type.METHOD) {
                    writer.append(from.getName()).append(" ")
                            .append(from.getClassName()).append(" ")
                            .append(from.getDescriptor()).append(" ")
                            .append(to.getName()).append(System.lineSeparator());
                } else {
                    throw new IllegalStateException("Invalid mapping types");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
